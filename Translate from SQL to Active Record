Translate from SQL to Active Record

1. User.all
2. User.find(1)
3. Post.order(created_at: :desc).limit(1)
4. User.joins(:posts).where('created_at >= 2014-08-31 00:00:00')
5. User.group_by(:favorite_color).having('count(*) > 1').count
6. User.max(:updated_at)
or
User.order(:updated_at => :desc)
  .limit(1)
7. User.max(:age)
or 
User.order(:birthdate).limit(1)
8. User.all
9. Post.order(created_at: :desc)

Translate from Active Record to SQL

1. select * from posts;
2. select * from posts limit 1;
3. select * from posts order_by id desc limit 1;
4. select * from posts where id = 4 limit 1;
5. select * from posts where id = 4;
6. Select count(*) from users;
7. select name from posts where 
   created_at > CURRENT_DATE - 3
   order by created_at;
8. select count(*) from posts group_by category_id;
9. select * from posts where created_at < '2014-01-01';
10.select distinct name, count(*) 
   from posts 
   group by name 
   having count(*) > 3 
11. select * from posts where title like 'The%';
12. select * from posts where id in (3, 5, 7, 9);

Custom Queries

1. Find the count of the posts created 1 day ago by Sarah Smith

Post.joins(user).where(created_at: 1.day_ago, name = 'Sarah Smith').count

Select count(*) as 'num posts'
from posts join user on user_id = post.user_id
where user = 'Sarah Smith'
and created_at = CURRENT_DAY - 1


2. Select the  number of posts per day

select count(*), CONVERT(created_at, getdate()) as
from posts
group by CONVERT(created_at, getdate())

Post.select(count(*), CONVERT(created_at, getdate() ).group(CONVERT(created_at, getdate())


3. Select the average number of posts per author

select AVG(count(*)), user.id
from posts join user on user_id = user.id
group_by user.id

Post.joins(user).select('count(*)/count(user.id)')

